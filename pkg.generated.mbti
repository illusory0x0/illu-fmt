// Generated using `moon info`, DON'T EDIT IT
package "illusory0x0/fmt"

import(
  "moonbitlang/core/bytes"
)

// Values
fn format_write(Bytes, Array[&Format], Memory, Int) -> Int raise

// Errors
type DebugError
impl Show for DebugError

// Types and methods
pub(all) struct BigEndian[T](T)
fn[T] BigEndian::inner(Self[T]) -> T
impl[T : BigEndianFormat] Format for BigEndian[T]

pub(all) struct LittleEndian[T](T)
fn[T] LittleEndian::inner(Self[T]) -> T
impl[T : LittleEndianFormat] Format for LittleEndian[T]

type Memory
fn Memory::length(Self) -> Int
fn Memory::make(Int, Byte) -> Self
fn Memory::op_get(Self, Int) -> Byte
fn Memory::op_set(Self, Int, Byte) -> Unit

// Type aliases

// Traits
pub(open) trait BigEndianFormat {
  write(Self, Memory, Int) -> Int
  count(Self) -> Int
}
impl BigEndianFormat for Int
impl BigEndianFormat for UInt

pub(open) trait Format {
  write(Self, Memory, Int) -> Int
  count(Self) -> Int
}
impl Format for Byte
impl Format for Int
impl Format for UInt
impl Format for Double
impl Format for Bytes
impl[A : Format] Format for Iter[A]
impl[A : Format, B : Format] Format for Iter2[A, B]
impl Format for @bytes.View
impl[A : Format, B : Format] Format for (A, B)

pub(open) trait LittleEndianFormat {
  write(Self, Memory, Int) -> Int
  count(Self) -> Int
}
impl LittleEndianFormat for Int
impl LittleEndianFormat for UInt

